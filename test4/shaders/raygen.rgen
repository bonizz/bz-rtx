#version 460
#extension GL_NV_ray_tracing : require
#extension GL_GOOGLE_include_directive : require

#include "shader-common.h"

layout(set = 0, binding = 0) uniform accelerationStructureNV Scene;
layout(set = 0, binding = 1, rgba8) uniform image2D ResultImage;
layout(set = 0, binding = 2, std140) uniform AppData { UniformParams Params; };

layout(location = 0) rayPayloadNV RayPayload PrimaryRay;
layout(location = 1) rayPayloadNV ShadowRayPayload ShadowRay;

void main()
{
    // https://www.scratchapixel.com/lessons/3d-basic-rendering/ray-tracing-generating-camera-rays/generating-camera-rays
    vec2 pixelRaster = gl_LaunchIDNV.xy;
    vec2 imageSize = gl_LaunchSizeNV.xy;

    // Compute raytacing NDC (note range [0,1])
    vec2 pixelNDC = (pixelRaster + vec2(0.5)) / imageSize;

    // Remap to range [-1, 1]
    vec2 pixelSS = pixelNDC * 2.0 - 1.0;

    // Y is reversed (since raster, NDC & screen space have pos Y pointing down)
    pixelSS.y = 1.0 - 2.0 * pixelNDC.y;

    // Compute camera/view space.  proj has fov, near, far
    vec4 pixelCS = Params.projInverse * vec4(pixelSS.x, pixelSS.y, 0., 1.);

    // Camera is at origin in camera space.  Compute direction to pixel in camera spce.
    vec4 originCS = vec4(0., 0., 0., 1.);
    vec4 directionCS = vec4(normalize((pixelCS - originCS).xyz), 0.);

    // Compute world space values
    vec4 directionWS = Params.viewInverse * directionCS;
    vec4 originWS = Params.viewInverse * vec4(0., 0., 0., 1.);

    uint rayFlags = gl_RayFlagsOpaqueNV;
    float tmin = 0.001;
    float tmax = 10000.0;

    traceNV(Scene, rayFlags, 0xFF,
        0, // sbtRecordOffset
        0, // sbtRecordStride
        0, // missIndex
        originWS.xyz,
        tmin, directionWS.xyz, tmax,
        0 // payload
    );

    vec3 hitColor = PrimaryRay.color_distance.rgb;
    float hitDistance = PrimaryRay.color_distance.w;

    if (hitDistance >= 0.)
    {
        vec3 hitPos = originWS.xyz + directionWS.xyz * hitDistance;

        vec3 hitNormal = PrimaryRay.normal.xyz;

        vec3 toLight = normalize(vec3(1., 1., 1.));
        vec3 shadowRayOrigin = hitPos;// + hitNormal * 0.01;
        uint shadowRayFlags = gl_RayFlagsOpaqueNV | gl_RayFlagsTerminateOnFirstHitNV;

        traceNV(Scene, shadowRayFlags, 0xFF,
             1, // offset 1 (choose 2nd hit shader)
             0, // stride ??
             1, // offset 1 (choose 2nd miss shader)
             shadowRayOrigin,
             2, // ?? adjusted for colored-sphere scene
             toLight, tmax,
             1  // payload location 1
        );

        if (ShadowRay.distance > 0.)
        {
            // In shadow
            hitColor *= 0.3;
        }

        hitColor = hitNormal;
    }


    imageStore(ResultImage, ivec2(gl_LaunchIDNV.xy), vec4(hitColor, 0.));
}


